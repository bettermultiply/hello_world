It's my First Git learnpaper

git init //初始化仓库
git add filename //将工作区修改置入暂存区
git commit -m "changes have been done" //将暂存区的修改提交入库
git status //查询状态，是否保存注释等
git diff //未保存时查看修改内容
git diff HEAD -- filename //查看工作区和版本库内最新版本的区别
git reset --hard HEAD~num //回滚
git reset --hard commit id //自动寻找
git reset HEAD filename //将暂存区的修改回退到工作区
git reflog //查看每一次命令
git log //查看版本库
git checkout -- filename //将文件回到最近一次git commit 或 git add 的状态
git rm // 用于删除一个版本库内文件
git remote -v //This should show me all of the push / fetch remotes for the project.
git remote add origin ssh://git@example.com//本地关联我的远程库
git remote remove origin // 移除远程库
git push -u origin master //把主干的所有内容推送到远程库
git branch // 查看分支
git branch -r //查看分支列表
git branch branchname //建立分支
git push origin --delete branchname //删除分支 
git branch -d branchname // 删除本地分支
//但分支未合并时git将会报错，分支未被合并，删除将会丢失修改
//使用-D强制删除
git checkout -b branchname // 新建并切换到分支
git merge branchname // 将一个分支合并到当前分支，分支不受影响
git switch -c branchname // 创建并切换到分支
git switch branchname //切换到已有分支
git log --graph //  查看分支合并图 （可选 --pretty=oneline）

git stash // 存储还未commit的工作现场，等待恢复现场后继续工作
git stash list //查看存储的工作现场
git stash apply //恢复工作现场但不删除stash
git stash applu stash@{0} //当保留现场指定恢复的stash, 可以使用list来查询存储的现场编号
git stash drop // 丢弃stash
git stash pop // 恢复现场并删除stash
git cherry-pick id //复制特定的commit到当前分支

开发新特性都该重建一个branch

可分为工作区，版本库(.git), 暂存区(Stage)

cat filename //查看文件内容

合并分支时git会使用Fast forward模式，即删除分支后会丢弃分支信息
使用--no-ff强制禁用Fast forward模式,并在merge时生成新的commit这样可以在分支历史看出分支信息
git merge --no-ff -m "commit" branchname

git tag tagname id //为某个特定commit打上tagname标签便于寻找
//若去掉id，则为最新的commit打上tagname标签
//同时去掉id，tagname，则查看所有标签，但该标签是按字母顺序排序的
git show tagname 查看说明文字
git tag -d tagname // 删除标签
git push origin tagname // 推送某个特定tag
git push origin --tags // 一次性推送所有tag
git push origin :refs/tags/tagname //远程删除某个tag（但要在本地先删除）


当合并git时出现冲突（通常是不同分支中同一个文件被进行不同的修改）
应手动修改避免冲突后合并

将两个不相关的分支合并：
1、先将两个分支均保存到本地 git clone respository-url
切换到预备成为主支的分支  git checkout branchname
允许两个不想关联的分支合并  git pull origin master --allow-unrelated-histories
最后推送到github， git push origin branchname
